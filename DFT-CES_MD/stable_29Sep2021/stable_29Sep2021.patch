diff -urN lammps-stable_29Sep2021/src/domain.cpp lammps-stable_29Sep2021_DFTCES/src/domain.cpp
--- lammps-stable_29Sep2021/src/domain.cpp	2021-09-30 01:40:00.000000000 +0100
+++ lammps-stable_29Sep2021_DFTCES/src/domain.cpp	2024-07-03 17:27:45.000000000 +0100
@@ -36,6 +36,9 @@
 #include "thermo.h"
 #include "universe.h"
 #include "update.h"
+// DFT-CES start
+#include "grid.h"
+// DFT-CES end
 
 #include <cstring>
 #include <cmath>
@@ -100,6 +103,14 @@
   nregion = maxregion = 0;
   regions = nullptr;
 
+// DFT-CES start
+  char **args2 = new char*[1];
+  grid = NULL;
+  args2[0] = (char *) "empty";
+  set_grid(1,args2);
+  delete [] args2;
+// DFT-CES end
+ 
   copymode = 0;
 
   region_map = new RegionCreatorMap();
@@ -120,6 +131,9 @@
   if (copymode) return;
 
   delete lattice;
+// DFT-CES start
+  delete grid;
+// DFT-CES end
   for (int i = 0; i < nregion; i++) delete regions[i];
   memory->sfree(regions);
 
@@ -1733,6 +1747,18 @@
   lattice = new Lattice(lmp,narg,arg);
 }
 
+// DFT-CES start
+/* ----------------------------------------------------------------------
+   create a grid
+------------------------------------------------------------------------- */
+
+void Domain::set_grid(int narg, char **arg)
+{
+  if (grid) delete grid;
+  grid = new Grid(lmp,narg,arg);
+}
+// DFT-CES end
+
 /* ----------------------------------------------------------------------
    create a new region
 ------------------------------------------------------------------------- */
diff -urN lammps-stable_29Sep2021/src/domain.h lammps-stable_29Sep2021_DFTCES/src/domain.h
--- lammps-stable_29Sep2021/src/domain.h	2021-09-30 01:40:00.000000000 +0100
+++ lammps-stable_29Sep2021_DFTCES/src/domain.h	2024-07-03 17:28:47.000000000 +0100
@@ -97,6 +97,9 @@
   int deform_groupbit;    // atom group to perform v remap for
 
   class Lattice *lattice;    // user-defined lattice
+// DFT-CES start
+  class Grid *grid;                        // 3d-grid for DFT-CES simulation
+// DFT-CES end
 
   int nregion;         // # of defined Regions
   int maxregion;       // max # list can hold
@@ -136,6 +139,9 @@
   int ownatom(int, double *, imageint *, int);
 
   void set_lattice(int, char **);
+// DFT-CES start
+  void set_grid(int, char **);
+// DFT-CES end
   void add_region(int, char **);
   void delete_region(int, char **);
   void delete_region(int);
diff -urN lammps-stable_29Sep2021/src/fix_gridforce.cpp lammps-stable_29Sep2021_DFTCES/src/fix_gridforce.cpp
--- lammps-stable_29Sep2021/src/fix_gridforce.cpp	1970-01-01 01:00:00.000000000 +0100
+++ lammps-stable_29Sep2021_DFTCES/src/fix_gridforce.cpp	2024-07-03 17:29:20.000000000 +0100
@@ -0,0 +1,251 @@
+/* ----------------------------------------------------------------------
+   DFT-CES core subroutines. Written by H.-K. Lim
+   Copyright (C) 2016 M-design group @ KAIST
+------------------------------------------------------------------------- */
+
+#include <string.h>
+#include <stdlib.h>
+#include "fix_gridforce.h"
+#include "atom.h"
+#include "atom_masks.h"
+#include "update.h"
+#include "modify.h"
+#include "domain.h"
+#include "region.h"
+#include "input.h"
+#include "variable.h"
+#include "memory.h"
+#include "error.h"
+#include "force.h"
+#include "grid.h"
+
+#include "comm.h"
+
+using namespace LAMMPS_NS;
+using namespace FixConst;
+
+/* ---------------------------------------------------------------------- */
+
+FixGridForce::FixGridForce(LAMMPS *lmp, int narg, char **arg) :
+  Fix(lmp, narg, arg)
+{
+  if (narg != 5) error->all(FLERR,"Illegal fix gridforce command");
+  scalar_flag = 1;
+  extscalar = 1;
+  energy_global_flag = 1;
+  
+  weight = atof(arg[3]);
+  sfactor = atoi(arg[4]);
+
+  if(comm->me == 0) printf("DFT-CES: weight factor    = %f\n", weight  );
+  if(comm->me == 0) printf("DFT-CES: supercell factor = %d\n", sfactor );
+
+  force_flag = 0;
+  Egrid = 0.0;
+  tmp3[0]=tmp3[1]=tmp3[2]=0;
+  tmp4[0]=tmp4[1]=tmp4[2]=tmp4[3]=0;
+}
+
+/* ---------------------------------------------------------------------- */
+
+FixGridForce::~FixGridForce()
+{
+  return;
+}
+
+/* ---------------------------------------------------------------------- */
+
+int FixGridForce::setmask()
+{
+  datamask_read = datamask_modify = 0;
+
+  int mask = 0;
+  mask |= POST_FORCE;
+  //mask |= THERMO_ENERGY; in new version, THERMO_ENERGY is deleted. Jay 2023 Oct
+  return mask;
+}
+
+/* ---------------------------------------------------------------------- */
+
+void FixGridForce::init()
+{
+  // check variables
+  if (domain->grid->natoms == 0) error->all(FLERR,"Grid data is unavilable");
+}
+
+/* ---------------------------------------------------------------------- */
+
+void FixGridForce::setup(int vflag)
+{
+  post_force(vflag);
+}
+
+/* ---------------------------------------------------------------------- */
+
+void FixGridForce::post_force(int vflag)
+{
+  double **x = atom->x;
+  double **f = atom->f;
+  double *q = atom->q;
+  int *mask = atom->mask;
+  int nlocal = atom->nlocal;
+  double fx, fy, fz;
+
+  Egrid = 0.0;
+  force_flag = 0;
+  tmp3[0]=tmp3[1]=tmp3[2]=0;
+  tmp4[0]=tmp4[1]=tmp4[2]=tmp4[3]=0;
+
+  for (int i = 0; i < nlocal; i++) {
+    if (mask[i] & groupbit) {
+        triInter(q[i], x[i][0], x[i][1], x[i][2], tmp4);
+        Egrid += weight*23.06092*q[i]*tmp4[0];
+        fx = weight*23.06092*q[i]*tmp4[1];
+        fy = weight*23.06092*q[i]*tmp4[2];
+        fz = weight*23.06092*q[i]*tmp4[3];
+        f[i][0] += fx;
+        f[i][1] += fy;
+        f[i][2] += fz;
+    }
+  }
+}
+
+double FixGridForce::compute_scalar()
+{
+  // only sum across procs one time
+
+  if (force_flag == 0) {
+    MPI_Allreduce(&Egrid,&Egrid_all,1,MPI_DOUBLE,MPI_SUM,world);
+    force_flag = 1;
+  }
+  return Egrid_all;
+}
+
+void FixGridForce::triInter(double q, double x, double y, double z, double* tmp4){
+  int i;
+  double* gvin = domain->grid->gvin;
+  double* gvout = domain->grid->gvout;
+  double px, py, pz, xd, yd, zd;
+  double p000, p100, p010, p001, p110, p101, p011, p111;
+  double e000[3], e100[3], e010[3], e001[3], e110[3], e101[3], e011[3], e111[3];
+  int gnx = domain->grid->gnx;
+  int gny = domain->grid->gny;
+  int gnz = domain->grid->gnz;
+  double gsx = domain->grid->gx[0];
+  double gsy = domain->grid->gy[1];
+  double gsz = domain->grid->gz[2];
+  double gvol;
+  if(x<0){
+    px =(fmod(x,gnx*gsx)+gnx*gsx)/gsx;
+  }else{
+    px = fmod(x,gnx*gsx)/gsx;
+  }
+  if(y<0){
+    py =(fmod(y,gny*gsy)+gny*gsy)/gsy;
+  }else{
+    py = fmod(y,gny*gsy)/gsy;
+  }
+  if(z<0){
+    pz =(fmod(z,gnz*gsz)+gnz*gsz)/gsz;
+  }else{
+    pz = fmod(z,gnz*gsz)/gsz;
+  }
+  xd=(double)(px-(int)px);
+  yd=(double)(py-(int)py);
+  zd=(double)(pz-(int)pz);
+  
+  tmp3[0]=tmp3[1]=tmp3[2]=0;
+  tmp4[0]=tmp4[1]=tmp4[2]=tmp4[3]=0;    
+
+  p000 = gridValue(gvin, (int)px, (int)py, (int)pz);
+  p100 = gridValue(gvin, 1+(int)px, (int)py, (int)pz);
+  p010 = gridValue(gvin, (int)px, 1+(int)py, (int)pz);
+  p001 = gridValue(gvin, (int)px, (int)py, 1+(int)pz);
+  p110 = gridValue(gvin, 1+(int)px, 1+(int)py, (int)pz);
+  p101 = gridValue(gvin, 1+(int)px, (int)py, 1+(int)pz);
+  p011 = gridValue(gvin, (int)px, 1+(int)py, 1+(int)pz);
+  p111 = gridValue(gvin, 1+(int)px, 1+(int)py, 1+(int)pz);
+  tmp4[0] = triInterValue(p000,p100,p010,p001,p110,p101,p011,p111,xd,yd,zd);
+  gridGrad(gvin, ((int)px)%gnx, ((int)py)%gny, ((int)pz)%gnz, tmp3);
+  for(i=0;i<3;i++) e000[i] = tmp3[i];
+  gridGrad(gvin, (1+(int)px)%gnx, ((int)py)%gny, ((int)pz)%gnz, tmp3);
+  for(i=0;i<3;i++) e100[i] = tmp3[i];
+  gridGrad(gvin, ((int)px)%gnx, (1+(int)py)%gny, ((int)pz)%gnz, tmp3);
+  for(i=0;i<3;i++) e010[i] = tmp3[i];
+  gridGrad(gvin, ((int)px)%gnx, ((int)py)%gny, (1+(int)pz)%gnz, tmp3);
+  for(i=0;i<3;i++) e001[i] = tmp3[i];
+  gridGrad(gvin, (1+(int)px)%gnx, (1+(int)py)%gny, ((int)pz)%gnz, tmp3);
+  for(i=0;i<3;i++) e110[i] = tmp3[i];
+  gridGrad(gvin, (1+(int)px)%gnx, ((int)py)%gny, (1+(int)pz)%gnz, tmp3);
+  for(i=0;i<3;i++) e101[i] = tmp3[i];
+  gridGrad(gvin, ((int)px)%gnx, (1+(int)py)%gny, (1+(int)pz)%gnz, tmp3);
+  for(i=0;i<3;i++) e011[i] = tmp3[i];
+  gridGrad(gvin, (1+(int)px)%gnx, (1+(int)py)%gny, (1+(int)pz)%gnz, tmp3);
+  for(i=0;i<3;i++) e111[i] = tmp3[i];
+  tmp4[1] = triInterValue(e000[0],e100[0],e010[0],e001[0],e110[0],e101[0],e011[0],e111[0],xd,yd,zd);
+  tmp4[2] = triInterValue(e000[1],e100[1],e010[1],e001[1],e110[1],e101[1],e011[1],e111[1],xd,yd,zd);
+  tmp4[3] = triInterValue(e000[2],e100[2],e010[2],e001[2],e110[2],e101[2],e011[2],e111[2],xd,yd,zd);
+
+  // inverse trilinear interpolation for saving MD rho
+  p000=(1-xd)*(1-yd)*(1-zd)*abs(weight)*q;
+  p100=xd*(1-yd)*(1-zd)*abs(weight)*q;
+  p010=(1-xd)*yd*(1-zd)*abs(weight)*q;
+  p110=xd*yd*(1-zd)*abs(weight)*q;
+  p001=(1-xd)*(1-yd)*zd*abs(weight)*q;
+  p101=xd*(1-yd)*zd*abs(weight)*q;
+  p011=(1-xd)*yd*zd*abs(weight)*q;
+  p111=xd*yd*zd*abs(weight)*q;
+
+  gvol = gsx*gsy*gsz;
+
+  gvout[((int)pz)%gnz+(((int)py)%gny)*gnz+(((int)px)%gnx)*gnz*gny] += p000/gvol/sfactor;
+  gvout[((int)pz)%gnz+(((int)py)%gny)*gnz+(((int)px+1)%gnx)*gnz*gny] += p100/gvol/sfactor;
+  gvout[((int)pz)%gnz+(((int)py+1)%gny)*gnz+(((int)px)%gnx)*gnz*gny] += p010/gvol/sfactor;
+  gvout[((int)pz+1)%gnz+(((int)py)%gny)*gnz+(((int)px)%gnx)*gnz*gny] += p001/gvol/sfactor;
+  gvout[((int)pz)%gnz+(((int)py+1)%gny)*gnz+(((int)px+1)%gnx)*gnz*gny] += p110/gvol/sfactor;
+  gvout[((int)pz+1)%gnz+(((int)py)%gny)*gnz+(((int)px+1)%gnx)*gnz*gny] += p101/gvol/sfactor;
+  gvout[((int)pz+1)%gnz+(((int)py+1)%gny)*gnz+(((int)px)%gnx)*gnz*gny] += p011/gvol/sfactor;
+  gvout[((int)pz+1)%gnz+(((int)py+1)%gny)*gnz+(((int)px+1)%gnx)*gnz*gny] += p111/gvol/sfactor;
+
+  return;
+}
+
+double FixGridForce::triInterValue(double c000,double c100, double c010, double c001, double c110, double c101, double c011, double c111, double xd,double yd,double zd){
+  double c00, c10, c01, c11, c0, c1, c;
+  c00 = c000*(1-xd) + c100*xd;
+  c01 = c001*(1-xd) + c101*xd;
+  c10 = c010*(1-xd) + c110*xd;
+  c11 = c011*(1-xd) + c111*xd;
+  c0 = c00*(1-yd) + c10*yd;
+  c1 = c01*(1-yd) + c11*yd;
+  c = c0*(1-zd) + c1*zd;
+  return c;
+}
+
+double FixGridForce::gridValue(double* gvin, int x, int y, int z){
+  int gnx = domain->grid->gnx;
+  int gny = domain->grid->gny;
+  int gnz = domain->grid->gnz;
+  double gValue=0;
+
+  gValue=gvin[(z%gnz)+(y%gny)*gnz+(x%gnx)*gnz*gny];
+
+ return gValue;
+}
+
+void FixGridForce::gridGrad(double* gvin, int x, int y, int z, double* tmp3){
+  int gnx = domain->grid->gnx;
+  int gny = domain->grid->gny;
+  int gnz = domain->grid->gnz;
+  double gsx = domain->grid->gx[0];
+  double gsy = domain->grid->gy[1];
+  double gsz = domain->grid->gz[2];
+
+  tmp3[0]=tmp3[1]=tmp3[2]=0;
+
+  tmp3[0] = -1*(gvin[z+y*gnz+((x+1)%gnx)*gnz*gny]-gvin[z+y*gnz+(x?(x-1):(gnx-1))*gnz*gny])/(2*gsx);
+  tmp3[1] = -1*(gvin[z+((y+1)%gny)*gnz+x*gnz*gny]-gvin[z+(y?(y-1):(gny-1))*gnz+x*gnz*gny])/(2*gsy);
+  tmp3[2] = -1*(gvin[((z+1)%gnz)+y*gnz+x*gnz*gny]-gvin[(z?(z-1):(gnz-1))+y*gnz+x*gnz*gny])/(2*gsz);
+
+  return;
+}
diff -urN lammps-stable_29Sep2021/src/fix_gridforce.h lammps-stable_29Sep2021_DFTCES/src/fix_gridforce.h
--- lammps-stable_29Sep2021/src/fix_gridforce.h	1970-01-01 01:00:00.000000000 +0100
+++ lammps-stable_29Sep2021_DFTCES/src/fix_gridforce.h	2024-07-03 17:29:20.000000000 +0100
@@ -0,0 +1,47 @@
+/* -*- c++ -*- ----------------------------------------------------------
+   DFT-CES core subroutines. Written by H.-K. Lim
+   Copyright (C) 2016 M-design group @ KAIST
+------------------------------------------------------------------------- */
+
+#ifdef FIX_CLASS
+
+FixStyle(gridforce,FixGridForce)
+
+#else
+
+#ifndef LMP_FIX_GRIDFORCE_H
+#define LMP_FIX_GRIDFORCE_H
+
+#include "fix.h"
+
+namespace LAMMPS_NS {
+
+class FixGridForce : public Fix {
+ public:
+  FixGridForce(class LAMMPS *, int, char **);
+  ~FixGridForce();
+  int setmask();
+  void init();
+  void setup(int);
+  void post_force(int);
+  double compute_scalar();
+  void triInter(double, double, double, double, double*);
+  double triInterValue(double,double,double,double,double,double,double,double,double,double,double);
+  double gridValue(double*, int, int, int);
+  void gridGrad(double*, int, int, int, double*);
+
+ private:
+  double weight;      // weight factor for grid energy and force, usually -1 for QE coupling
+  int sfactor;        // supercell factor
+  double tmp3[3], tmp4[4];
+ 
+  int force_flag;
+
+  double Egrid, Egrid_all;
+
+};
+
+}
+
+#endif
+#endif
diff -urN lammps-stable_29Sep2021/src/grid.cpp lammps-stable_29Sep2021_DFTCES/src/grid.cpp
--- lammps-stable_29Sep2021/src/grid.cpp	1970-01-01 01:00:00.000000000 +0100
+++ lammps-stable_29Sep2021_DFTCES/src/grid.cpp	2024-07-03 17:29:50.000000000 +0100
@@ -0,0 +1,188 @@
+/* ----------------------------------------------------------------------
+   DFT-CES core subroutines. Written by H.-K. Lim
+   Copyright (C) 2016 M-design group @ KAIST
+------------------------------------------------------------------------- */
+
+#include <math.h>
+#include <string.h>
+#include <stdlib.h>
+#include "grid.h"
+#include "update.h"
+#include "domain.h"
+#include "comm.h"
+#include "force.h"
+#include "memory.h"
+#include "error.h"
+#include "fix_gridforce.h"
+
+using namespace LAMMPS_NS;
+
+#define MAXLINE 1024
+
+/* ---------------------------------------------------------------------- */
+
+Grid::Grid(LAMMPS *lmp, int narg, char **arg) : Pointers(lmp)
+{
+  int me = comm -> me;
+  int i;
+
+  natoms = 0;
+  atomns = NULL;
+  basis  = NULL;
+  gvin = NULL;
+  gvout = NULL;
+  gvout_all = NULL;
+
+  if (narg != 1) error->all(FLERR,"Illegal grid command");
+
+  if (strcmp(arg[0],"empty") != 0 ){ 
+    // read header until atom information
+    read_header(arg[0]);
+
+    if(gx[1]+gx[2]+gy[0]+gy[2]+gz[0]+gz[1] != 0) error->all(FLERR,"Grid file is not orthorhombic");
+    if(me == 0){
+      printf("Grid file has been parsed: %s\n",arg[0]);
+      printf("DFT-CES: # of atoms in grid: %d\n", natoms);
+      printf("DFT-CES: # of grid points: %d %d %d\n", gnx, gny, gnz);
+      printf("DFT-CES: grid spacing: %f %f %f Angs\n", gx[0], gy[1], gz[2]);
+    }
+    memory->grow(atomns, natoms, "grid:atomns");
+    memory->grow(basis, natoms, 3, "grid:basis");
+    memory->grow(gvin, gnx*gny*gnz, "grid:gvin");
+    memory->grow(gvout, gnx*gny*gnz, "grid:gvout");
+    if(me==0)memory->grow(gvout_all, gnx*gny*gnz, "grid:gvout");
+
+    // read atom and grid value information
+    read_content(arg[0]);
+  }
+  else{
+    return;
+  }
+}
+
+/* ---------------------------------------------------------------------- */
+
+Grid::~Grid()
+{
+  memory->destroy(atomns);
+  memory->destroy(basis);
+  memory->destroy(gvin);
+  memory->destroy(gvout);
+  memory->destroy(gvout_all);
+}
+
+/* ---------------------------------------------------------------------- */
+
+void Grid::read_header(char *filename)
+{
+  int me = comm->me;
+  FILE *fptr;
+  char line[MAXLINE];
+  double temp[4];
+
+  if (me == 0) {
+    fptr = fopen(filename,"r");
+    if (fptr == NULL) {
+      char str[128];
+      sprintf(str,"Cannot open grid file %s",filename);
+      error->one(FLERR,str);
+    }
+
+    fgets(line,MAXLINE,fptr);
+    fgets(line,MAXLINE,fptr); // skip first two rows
+    fgets(line,MAXLINE,fptr);
+    sscanf(line,"%d %lf %lf %lf", &natoms, &temp[0], &temp[1], &temp[2]);
+    fgets(line,MAXLINE,fptr);
+    sscanf(line,"%d %lf %lf %lf", &gnx, &gx[0], &gx[1], &gx[2]);
+    gx[0] *= 0.52917721;
+    fgets(line,MAXLINE,fptr);
+    sscanf(line,"%d %lf %lf %lf", &gny, &gy[0], &gy[1], &gy[2]);
+    gy[1] *= 0.52917721;
+    fgets(line,MAXLINE,fptr);
+    sscanf(line,"%d %lf %lf %lf", &gnz, &gz[0], &gz[1], &gz[2]);
+    gz[2] *= 0.52917721;
+    
+    fclose(fptr);
+  }
+
+  MPI_Bcast(&natoms,1,MPI_INT,0,world);
+  MPI_Bcast(&gnx,1,MPI_INT,0,world);
+  MPI_Bcast(&gny,1,MPI_INT,0,world);
+  MPI_Bcast(&gnz,1,MPI_INT,0,world);
+  MPI_Bcast(&gx[0],3,MPI_DOUBLE,0,world);
+  MPI_Bcast(&gy[0],3,MPI_DOUBLE,0,world);
+  MPI_Bcast(&gz[0],3,MPI_DOUBLE,0,world);
+
+}
+
+void Grid::read_content(char *filename)
+{
+  int me = comm->me;
+  FILE *fptr;
+  char line[MAXLINE], *str_ptr;
+  double temp;
+  int i, cnt;
+
+  if (me == 0) {
+    fptr = fopen(filename,"r");
+    for(i=0; i<6; i++) fgets(line,MAXLINE,fptr);
+    for(i=0; i<natoms; i++){
+      fgets(line,MAXLINE,fptr);
+      sscanf(line,"%d %lf %lf %lf %lf", &atomns[i], &temp, &basis[i][0], &basis[i][1], &basis[i][2]);
+      basis[i][0] *= 0.52917721;
+      basis[i][1] *= 0.52917721;
+      basis[i][2] *= 0.52917721;
+    }
+    cnt = 0;
+    while(fgets(line,MAXLINE,fptr)!=NULL){
+      str_ptr = strtok(line," ");
+      for(; str_ptr!=NULL; cnt++) {
+        sscanf(str_ptr,"%lf",&gvin[cnt]);
+        gvin[cnt] *= 13.60569253;              // Ry to eV
+        str_ptr = strtok(NULL," ");
+      }
+    }    
+    fclose(fptr);
+  }
+
+  MPI_Bcast(&atomns[0],natoms,MPI_INT,0,world);
+  MPI_Bcast(&basis[0][0],3*natoms,MPI_DOUBLE,0,world);
+  MPI_Bcast(&gvin[0],gnx*gny*gnz,MPI_DOUBLE,0,world);
+
+}
+
+void Grid::save_grid(char* filename, int nsteps)
+{
+  int me = comm->me;
+  FILE *fptr;
+  int i, j, k, cnt;
+  
+  MPI_Reduce(gvout,gvout_all,gnx*gny*gnz,MPI_DOUBLE,MPI_SUM,0,world);
+
+  if (me == 0 ){
+    fptr = fopen(filename, "w");
+    fprintf(fptr,"MDrho from DFT-CES\n");
+    fprintf(fptr,"ZYX, Bohr unit\n");
+    fprintf(fptr,"% 5d    0.000000    0.000000    0.000000\n",natoms);
+    fprintf(fptr,"% 5d% 12.6lf    0.000000    0.000000\n",gnx,gx[0]/0.52917721);
+    fprintf(fptr,"% 5d    0.000000% 12.6lf    0.000000\n",gny,gy[1]/0.52917721);
+    fprintf(fptr,"% 5d    0.000000    0.000000% 12.6lf\n",gnz,gz[2]/0.52917721);
+    for(i=0; i<natoms; i++) {
+      fprintf(fptr,"% 5d% 12.6lf% 12.6lf% 12.6lf% 12.6lf\n",atomns[i],(double)atomns[i],basis[i][0]/0.52917721,basis[i][1]/0.52917721,basis[i][2]/0.52917721);
+    }
+    for(i=0;i<gnx;i++){
+      for(j=0;j<gny;j++){
+        cnt = 0;
+        for(k=0;k<gnz;k++){
+          fprintf(fptr,"% 13.5lE",gvout_all[k+j*gnz+i*gnz*gny]*pow(0.52917721,3)/(nsteps+1));
+          if(cnt%6 == 5 && k < gnz-1) fprintf(fptr,"\n");
+          cnt++;
+        }
+        fprintf(fptr,"\n");
+      }
+    }
+    fclose(fptr);
+    printf("DFT-CES: MDrho.cube has been successfully saved\n");
+  }
+}
+
diff -urN lammps-stable_29Sep2021/src/grid.h lammps-stable_29Sep2021_DFTCES/src/grid.h
--- lammps-stable_29Sep2021/src/grid.h	1970-01-01 01:00:00.000000000 +0100
+++ lammps-stable_29Sep2021_DFTCES/src/grid.h	2024-07-03 17:29:59.000000000 +0100
@@ -0,0 +1,35 @@
+/* -*- c++ -*- ----------------------------------------------------------
+   DFT-CES core subroutines. Written by H.-K. Lim
+   Copyright (C) 2016 M-design group @ KAIST
+------------------------------------------------------------------------- */
+
+#ifndef LMP_GRID_H
+#define LMP_GRID_H
+
+#include "pointers.h"
+
+namespace LAMMPS_NS {
+
+class Grid : protected Pointers {
+ public:
+  int gnx, gny, gnz;                   // # of grid points in 3 dim
+  double gx[3],gy[3],gz[3];            // grid spacing vectors of (unit: Ang)
+  int natoms;                          // # of atoms
+  int *atomns;                         // atomic numbers for each atom
+  double **basis;                      // cartesian coords of each atom (unit: Ang)
+                                       // within unit cell (0 <= coord < 1)
+  double *gvin;                        // grid values from QM pot (unit: Ry)
+  double *gvout, *gvout_all;           // grid values for MD rho  (unit: Ry)
+
+  Grid(class LAMMPS *, int, char **);
+  ~Grid();
+
+  void read_header(char *);
+  void read_content(char *);
+  void save_grid(char *, int);
+};
+
+}
+
+#endif
+
diff -urN lammps-stable_29Sep2021/src/input.cpp lammps-stable_29Sep2021_DFTCES/src/input.cpp
--- lammps-stable_29Sep2021/src/input.cpp	2021-09-30 01:40:00.000000000 +0100
+++ lammps-stable_29Sep2021_DFTCES/src/input.cpp	2024-07-03 17:31:35.000000000 +0100
@@ -751,6 +751,9 @@
   else if (!strcmp(command,"kspace_modify")) kspace_modify();
   else if (!strcmp(command,"kspace_style")) kspace_style();
   else if (!strcmp(command,"lattice")) lattice();
+  // DFT-CES start
+  else if (!strcmp(command,"grid")) grid();
+  // DFT-CES end
   else if (!strcmp(command,"mass")) mass();
   else if (!strcmp(command,"min_modify")) min_modify();
   else if (!strcmp(command,"min_style")) min_style();
@@ -1578,6 +1581,13 @@
   domain->set_lattice(narg,arg);
 }
 
+// DFT-CES start
+void Input::grid()
+{
+  domain->set_grid(narg,arg);
+}
+// DFT-CES end
+
 /* ---------------------------------------------------------------------- */
 
 void Input::mass()
diff -urN lammps-stable_29Sep2021/src/input.h lammps-stable_29Sep2021_DFTCES/src/input.h
--- lammps-stable_29Sep2021/src/input.h	2021-09-30 01:40:00.000000000 +0100
+++ lammps-stable_29Sep2021_DFTCES/src/input.h	2024-07-03 17:32:08.000000000 +0100
@@ -117,6 +117,9 @@
   void kspace_modify();
   void kspace_style();
   void lattice();
+  // DFT-CES start
+  void grid();
+  // DFT-CES end
   void mass();
   void min_modify();
   void min_style();
diff -urN lammps-stable_29Sep2021/src/run.cpp lammps-stable_29Sep2021_DFTCES/src/run.cpp
--- lammps-stable_29Sep2021/src/run.cpp	2021-09-30 01:40:00.000000000 +0100
+++ lammps-stable_29Sep2021_DFTCES/src/run.cpp	2024-07-03 17:32:50.000000000 +0100
@@ -23,6 +23,9 @@
 #include "output.h"
 #include "timer.h"
 #include "update.h"
+// DFT-CES start
+#include "grid.h"
+// DFT-CES end
 
 #include <cstring>
 
@@ -179,6 +182,9 @@
     timer->barrier_start();
     update->integrate->run(nsteps);
     timer->barrier_stop();
+// DFT-CES start
+    if(domain->grid->natoms != 0) domain->grid->save_grid("MDrho.cube",nsteps);
+// DFT-CES end
 
     update->integrate->cleanup();
 
